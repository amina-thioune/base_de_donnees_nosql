import streamlit as st
import redis 
from redis_utils.fonctions_redis import * 



def display_redis_page() : 

    # Titre et logo 
    st.image("images/redis.png",  width=250)

    # D√©finition
    with st.expander("D√©finition"):
        st.error("""            
                    Les **bases de donn√©es NoSQL** repr√©sentent une cat√©gorie de syst√®mes de gestion de bases de donn√©es con√ßus pour g√©rer des volumes massifs de donn√©es non structur√©es ou semi-structur√©es. Contrairement aux bases de donn√©es relationnelles qui reposent sur des tables et des sch√©mas rigides, les bases de donn√©es NoSQL offrent une flexibilit√© accrue, permettant de stocker des donn√©es sous diverses formes telles que des documents, des colonnes, des paires cl√©-valeur ou des graphes. Elles sont particuli√®rement adapt√©es aux applications n√©cessitant une scalabilit√© horizontale, une haute disponibilit√© et des performances optimis√©es.

                    **Redis** est l'un des exemples les plus populaires de base de donn√©es NoSQL. Initialement con√ßu comme un store en m√©moire, Redis propose une structure de donn√©es cl√©-valeur extr√™mement rapide, supportant des types vari√©s tels que des cha√Ænes, des listes, des ensembles et des hashmaps. Gr√¢ce √† sa rapidit√© et √† sa simplicit√© d'utilisation, Redis est souvent utilis√© pour des cas d'utilisation tels que la mise en cache, la gestion des sessions et la gestion des files d'attente. En explorant Redis, nous mettons en lumi√®re les avantages des bases de donn√©es NoSQL dans le paysage actuel des applications, ainsi que les fonctionnalit√©s uniques qui font de Redis un outil incontournable pour les d√©veloppeurs.
        """)

    st.subheader("Installer Redis")
    st.code("pip install redis") 

    st.subheader("Connexion √† la base de donn√©es")
    st.write("Pour vous connecter √† la base de donn√©es, visitez le site de Redis Cloud 	üëá, cr√©ez une nouvelle base de donn√©es et r√©cup√©rez vos informations de connexion")
    st.code("https://cloud.redis.io/#/")

    st.code("""
    r = redis.Redis(
        host='*****',  # Remplacez par le host fourni par le service cloud
        port=17931,
        password='******'  # Remplacez par le mot de passe fourni par le service cloud
    )
    """) 

    # Commandes de bases
    st.subheader("Quelques commandes de base")
    with st.expander("Codes") : 
        st.code(""" 
                    # Ajouter un ou plusieurs paires cl√©-valeur
                    r.set('key1', 'value1')
                    r.mset({'key2': 'value2', 'key3': 'value3'})

                    # Modifier un ou plusieurs cl√©s existantes
                    r.set('key2', 'new_value2')
                    r.mset({'key1': 'new_value1', 'key3': 'new_value3'})

                    # R√©cup√©rer un ou plusieurs valeurs
                    r.get('key1')
                    r.mget(['key1', 'key2', 'key3'])

                    # Ajouter des √©l√©ments dans une liste
                    r.rpush('mylist', 'element1', 'element2', 'element3')

                    # Ajouter des √©l√©ments dans un ensemble
                    r.sadd('myset', 'value1', 'value2', 'value3')

                    # Supprimer des cl√©s
                    r.delete('key1', 'key2')

                    # Supprimer un √©l√©ment d'une liste
                    r.lrem('mylist', 0, 'element1')

                    # Supprimer un √©l√©ment d'un ensemble
                    r.srem('myset', 'value1')

                    # V√©rifier si une cl√© existe
                    r.exists('key1')

                    # Obtenir toutes les cl√©s
                    r.keys('*')

                    # Effacer la base de donn√©es Redis
                    r.flushdb()

                """)


    # Convertir un fichier csv en json
    st.subheader("Convertir le fichier CSV en JSON")
    st.write("La conversion d'un fichier CSV en JSON pour Redis permet de b√©n√©ficier d'une meilleure compatibilit√© et flexibilit√©, car JSON est id√©al pour stocker des structures de donn√©es complexes sous forme de paires cl√©-valeur. Cela facilite √©galement l'int√©gration avec d'autres syst√®mes, notamment les applications web et les APIs.")

    with st.expander("Code") : 
        st.code(""" 
                    import csv
                    from json import dumps

                    def csv_to_json(csv_file, json_file):
                        # Cr√©er un dictionnaire
                        data_dict = {}
                        csv_rows = []
                        # Ouvrir un fichier CSV
                        with open(csv_file, encoding='latin1', newline='') as csv_file_handler:
                            csv_reader = csv.DictReader(csv_file_handler)
                            field = csv_reader.fieldnames
                            for row in csv_reader:
                                # Ajouter chaque ligne du CSV sous forme de dictionnaire
                                csv_rows.extend([{field[i]: row[field[i]] for i in range(len(field))}])

                        data_dict['test'] = csv_rows

                        # Convertir le dictionnaire en cha√Æne JSON
                        json_data = dumps(data_dict, ensure_ascii=False, indent=4)

                        # √âcrire les donn√©es JSON dans un fichier
                        with open(json_file, 'w', encoding='utf-8') as json_file_handler:
                            json_file_handler.write(json_data)

                        return json_file
                """) 
        

    # Jointure des objets json 
    st.subheader("Joindre deux fichiers json")
    st.write("Joindre deux fichiers JSON avant de les ins√©rer dans Redis permet de consolider les donn√©es en une seule structure, √©vitant leur dispersion et facilitant leur gestion. Cela optimise les requ√™tes en r√©duisant le besoin de multiples appels pour r√©cup√©rer des informations li√©es, tout en assurant la coh√©rence des op√©rations, les donn√©es √©tant disponibles ensemble et sans risque de d√©synchronisation. Au final, cela rend les op√©rations dans Redis plus rapides et efficaces.")
    with st.expander("Code") : 
        st.code(""" 
                    from json import loads, dumps
                
                    def jointure(json1, json2, join_key):
                        # Charger les deux JSON en tant que dictionnaires
                        d1 = loads(json1)['data']
                        d2 = loads(json2)['data']
                        
                        d_res = []
                        
                        # It√©rer √† travers les deux ensembles de donn√©es pour la jointure
                        for item1 in d1:
                            for item2 in d2:
                                if item1[join_key] == item2[join_key]:  # Comparer les valeurs de la cl√© commune
                                    joint_dict = {**item1, **item2}  # Fusionner les deux dictionnaires
                                    d_res.append(joint_dict)

                        # G√©n√©rer la cha√Æne JSON finale avec la jointure
                        final_result = {'jointure': d_res}
                        return dumps(final_result, ensure_ascii=False, indent=4)
                """)


    # convertir un fichier json en une base de donn√©es
    st.subheader("Importer un fichier JSON dans Redis") 
    with st.expander("Code"):
        st.code("""
                    import json
                    import redis

                    def json_to_redis(json_file):
                        # Charger le contenu du fichier JSON
                        with open(json_file, 'r') as f:
                            data = json.load(f)

                        # R√©cup√©rer les √©l√©ments sous 'test'
                        items = data.get('test', {})

                        # Ins√©rer les donn√©es dans Redis
                        if isinstance(items, dict):
                            for key, value in items.items():
                                r.set(key, json.dumps(value))
                        else:
                            return "Le contenu sous 'test' n'est pas un dictionnaire."

                        # R√©cup√©rer les donn√©es depuis Redis et les retourner
                        return {key: json.loads(r.get(key)) for key in items.keys() if r.get(key)}
                """)
    
    st.write("")
    # Bloom Filter
    st.header("BLOOM FILTER üîé") # üîç
    with st.expander("D√©finition") :
        st.error("""
                    Un **Bloom filter** est une structure de donn√©es efficace en m√©moire qui permet de tester si un √©l√©ment 
                    appartient √† un ensemble, avec la possibilit√© de faux positifs mais jamais de faux n√©gatifs. Il est 
                    souvent utilis√© pour √©conomiser des ressources lors de recherches rapides. Avec Redis, via l'extension 
                    **RedisBloom**, on peut utiliser des Bloom filters pour v√©rifier rapidement si des √©l√©ments sont pr√©sents 
                    dans des ensembles massifs, ce qui aide √† r√©duire les requ√™tes co√ªteuses en m√©moire ou en temps de calcul.

                """)

    # connexion √† redisbloom
    st.subheader("Connexion √† RedisBloom")
    st.code("""
            from redisbloom.client import Client
            rb = Client(host='******', 
                        port=17931, 
                        password='*****')
            """)



